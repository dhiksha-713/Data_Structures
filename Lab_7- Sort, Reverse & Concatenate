#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

struct Node
{
    int data;
    struct Node *next;

};

void insert_end(struct Node **head_ref,int new_data)
{
    struct Node *last;
    struct Node *new_node=(struct Node *)malloc(sizeof(struct Node));
    new_node->data=new_data;
    new_node->next=NULL;
    if(*head_ref==NULL)
    {
        *head_ref=new_node;
    }
    else
    {
        last=*head_ref;
        while(last->next!=NULL)
            last=last->next;
        last->next=new_node;
    }
}


void printlist(struct Node *node)
{
    if(node==NULL)
    {
        printf("The list is empty");
    }
    else
    {
        printf("\nThe Created list is:\n");
        while(node!=NULL)
        {
            printf("%d ",node->data);
            node=node->next;
        }
    }
}

void reversel(struct Node **head_ref)
{
    struct Node *curr,*prev,*nxt;
    if(*head_ref==NULL)
    {
         printf("The list is empty");
    }
    else
    {
        prev=NULL;
        nxt=NULL;
        curr=*head_ref;
        while(curr!=NULL)
        {
            nxt=curr->next;
            curr->next=prev;
            prev=curr;
            curr=nxt;
        }
        *head_ref=prev;
    }
}

void concat(struct Node **head1,struct Node **head2)
{
    struct Node *last;
    last=*head1;
    if(*head1==NULL)
    {
        printf("The list 1 is empty");
    }
    else if(*head2==NULL)
    {
        printf("The list 2 is empty");
    }
    else
    {
        while(last->next!=NULL)
            last=last->next;
        last->next=*head2;
    }
}

void sort(struct Node *head)
{
    struct Node *current,*index;
    int temp;
    if(head==NULL)
    {
         printf("The list is empty");
    }
    else
    {
            for (current = head; current->next != NULL; current = current->next)
            {
                for (index = current->next; index != NULL; index = index->next)
                {
                    if (current->data > index->data)
                    {
                        temp = current->data;
                        current->data = index->data;
                        index->data = temp;
                    }
                }
            }
    }
}

int main()
{
    struct Node *head=NULL, *head2=NULL;
    while(1)
    {
        int op,op2,x,p,size,v;
        printf("\nMENU\n\n1.Insert elements in List 1\n2.Insert elements in List 2 \n3.Sort the elements in the list\n4.Reverse the elements\n5.Concatenate List 1 and List 2\n6.Display elements of list 1\n");
        printf("7.Display elements of list 2\n8.Exit\n");
        scanf("%d",&op);
        switch(op)
        {
        case 1: printf("\nEnter the value\n");
                scanf("%d",&x);
                size++;
                insert_end(&head,x);
                break;
        case 2: printf("\nEnter the value\n");
                scanf("%d",&x);
                size++;
                insert_end(&head2,x);
                break;
        case 3: sort(head);
                break;
        case 4: reversel(&head);
                break;
        case 5: concat(&head,&head2);
                break;
        case 6: printlist(head);
                break;
        case 7: printlist(head2);
                break;
        case 8: exit(0);
        default: printf("\Invalid choice! Try Again!!\n");
        }
    }
return 0;
}
